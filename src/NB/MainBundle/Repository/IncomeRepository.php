<?php

namespace NB\MainBundle\Repository;

/**
 * IncomeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncomeRepository extends \Doctrine\ORM\EntityRepository
{
    public function getStatus($seatseller){
        $queryBuilder = $this
            ->createQueryBuilder('i')
            ->innerJoin('i.seatseller', 's')
            ->select('SUM(i.montant) As solde')
            ->where('s.id = :ss')
            ->setParameter('ss', $seatseller);
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $results = $query->getResult();

      //  dump($results); exit;

        $outcome = $this->_em->getRepository('NBMainBundle:Outcome')->getSolde($seatseller);

        $total = $results[0]['solde'] - $outcome[0]['solde'];

        return $total;

    }

    public function getHistory($seatseller, $from = null, $to = null){
        if($from == null && $to == null){
            $queryBuilder = $this
                ->createQueryBuilder('i')
                ->innerJoin('i.seatseller', 'seatseller')
                ->where('seatseller.id = :ss')
                ->setParameter('ss', $seatseller);
            // On récupère la Query à partir du QueryBuilder
            $query = $queryBuilder->getQuery();
            // On récupère les résultats à partir de la Query
            $results = $query->getResult();


            return $results;
        }else{
            $queryBuilder = $this
                ->createQueryBuilder('i')
                ->innerJoin('i.seatseller', 'seatseller')
                ->where('seatseller.id = :ss')
                ->andWhere('i.dateRecharge BETWEEN :from AND :to')
                ->setParameters([
                    'ss' => $seatseller,
                    'from' => $from,
                    'to' => $to
                ]);
            // On récupère la Query à partir du QueryBuilder
            $query = $queryBuilder->getQuery();
            // On récupère les résultats à partir de la Query
            $results = $query->getResult();


            return $results;

        }

    }
}
